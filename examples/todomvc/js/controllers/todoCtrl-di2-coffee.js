// Generated by CoffeeScript 1.6.3
/* global todomvc, angular*/

'use strict';
/*
# The main controller for the app. The controller:
# - retrieves and persists the model via the todoStorage service
# - exposes the model to the template and provides event handlers
*/

var _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(_super) {
  __extends(_Class, _super);

  function _Class() {
    _ref = _Class.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  _Class.register('$#todoapp');

  _Class.inject({
    $scope: '$',
    $location: '$loc',
    todoStorage: '.',
    filterFilter: 'fF'
  });

  _Class.prototype.init = function() {
    this.todos = this.$.todos = this.todoStorage.get();
    this.$.newTodo = '';
    this.$.editedTodo = null;
    if (this.$loc.path() === '') {
      this.$loc.path('/');
    }
    return this.$.location = this.$loc;
  };

  _Class.prototype.watch = {
    'location.path()': function(path) {
      return this.$.statusFilter = path === '/active' ? {
        completed: false
      } : path === '/completed' ? {
        completed: true
      } : null;
    },
    '{object}todos': '_onTodoChange'
  };

  _Class.prototype._onTodoChange = function(newValue, oldValue) {
    this.$.remainingCount = this.fF(this.todos, {
      completed: false
    }).length;
    this.$.completedCount = this.todos.length - this.$.remainingCount;
    this.$.allChecked = !this.$.remainingCount;
    if (newValue !== oldValue) {
      return this.todoStorage.put(this.todos);
    }
  };

  _Class.prototype.addTodo = function() {
    var newTodo;
    newTodo = this.$.newTodo.trim();
    if (!newTodo.length) {
      return;
    }
    this.todos.push({
      title: newTodo,
      completed: false
    });
    return this.$.newTodo = "";
  };

  _Class.prototype.editTodo = function(todo) {
    this.$.editedTodo = todo;
    return this.$.originalTodo = angular.extend({}, todo);
  };

  _Class.prototype.doneEditing = function(todo) {
    this.$.editedTodo = null;
    todo.title = todo.title.trim();
    if (!todo.title) {
      return this.$.removeTodo(todo);
    }
  };

  _Class.prototype.revertEditing = function(todo) {
    this.todos[this.todos.indexOf(todo)] = this.$.originalTodo;
    return this.$.doneEditing(this.$.originalTodo);
  };

  _Class.prototype.removeTodo = function(todo) {
    return this.todos.splice(this.todos.indexOf(todo), 1);
  };

  _Class.prototype.clearCompletedTodos = function() {
    return this.$.todos = this.todos = this.todos.filter(function(val) {
      return !val.completed;
    });
  };

  _Class.prototype.markAll = function(completed) {
    var todo, _i, _len, _ref1, _results;
    _ref1 = this.todos;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      todo = _ref1[_i];
      _results.push(todo.completed = completed);
    }
    return _results;
  };

  return _Class;

})(todomvc.cC);
