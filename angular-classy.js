// Generated by CoffeeScript 1.6.3
/*
Angular Classy 1.1.1
Dave Jeffery, @DaveJ
License: MIT
*/

/* global angular*/

'use strict';
var classFns, origMethod,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __slice = [].slice;

classFns = {
  selectorControllerCount: 0,
  construct: function(parent, args) {
    this.bindDependencies(parent, args);
    this.addFnsToScope(parent);
    if (typeof parent.init === "function") {
      parent.init();
    }
    if (angular.isObject(parent.watch)) {
      return this.registerWatchers(parent);
    }
  },
  addFnsToScope: function(parent) {
    var $scope, fn, key, _ref, _results;
    $scope = parent[parent.constructor.prototype.__classyControllerScopeName];
    _ref = parent.constructor.prototype;
    _results = [];
    for (key in _ref) {
      fn = _ref[key];
      if (!angular.isFunction(fn)) {
        continue;
      }
      if ((key === 'constructor' || key === 'init' || key === 'watch') || key[0] === '_') {
        continue;
      }
      _results.push($scope[key] = angular.bind(parent, fn));
    }
    return _results;
  },
  bindDependencies: function(parent, args) {
    var i, injectName, injectObject, injectObjectMode, key, _i, _len, _ref, _results;
    injectObject = parent.__classyControllerInjectObject;
    injectObjectMode = !!injectObject;
    _ref = parent.constructor.$inject;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      key = _ref[i];
      if (injectObjectMode && (injectName = injectObject[key]) && injectName !== '.') {
        _results.push(parent[injectName] = args[i]);
      } else {
        _results.push(parent[key] = args[i]);
      }
    }
    return _results;
  },
  registerWatchers: function(parent) {
    var $scope, expression, fn, keyword, watchRegistered, watchType, watchTypes, _i, _len, _ref, _ref1, _results;
    $scope = parent[parent.constructor.prototype.__classyControllerScopeName];
    watchTypes = {
      normal: {
        keywords: [],
        fnCall: function(parent, expression, fn) {
          return $scope.$watch(expression, angular.bind(parent, fn));
        }
      },
      objectEquality: {
        keywords: ['{object}', '{deep}'],
        fnCall: function(parent, expression, fn) {
          return $scope.$watch(expression, angular.bind(parent, fn), true);
        }
      },
      collection: {
        keywords: ['{collection}', '{shallow}'],
        fnCall: function(parent, expression, fn) {
          return $scope.$watchCollection(expression, angular.bind(parent, fn));
        }
      }
    };
    _ref = parent.watch;
    _results = [];
    for (expression in _ref) {
      fn = _ref[expression];
      if (angular.isString(fn)) {
        fn = parent[fn];
      }
      if (angular.isString(expression) && angular.isFunction(fn)) {
        watchRegistered = false;
        for (watchType in watchTypes) {
          if (watchRegistered) {
            break;
          }
          _ref1 = watchTypes[watchType].keywords;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            keyword = _ref1[_i];
            if (watchRegistered) {
              break;
            }
            if (expression.indexOf(keyword) !== -1) {
              watchTypes[watchType].fnCall(parent, expression.replace(keyword, ''), fn);
              watchRegistered = true;
            }
          }
        }
        if (!watchRegistered) {
          _results.push(watchTypes.normal.fnCall(parent, expression, fn));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  },
  inject: function(parent, deps) {
    var injectObject, name, service;
    if (angular.isObject(deps[0])) {
      parent.prototype.__classyControllerInjectObject = injectObject = deps[0];
      deps = (function() {
        var _results;
        _results = [];
        for (service in injectObject) {
          name = injectObject[service];
          _results.push(service);
        }
        return _results;
      })();
      if ((injectObject != null ? injectObject['$scope'] : void 0) && injectObject['$scope'] !== '.') {
        parent.prototype.__classyControllerScopeName = injectObject['$scope'];
      }
    }
    return parent.$inject = deps;
  },
  registerSelector: function(appInstance, selectorString, parent) {
    var controllerName, el, els, _i, _len, _results;
    this.selectorControllerCount++;
    controllerName = "" + (selectorString.replace(/\W/g, '')) + "ClassySelector" + this.selectorControllerCount + "Controller";
    appInstance.controller(controllerName, parent);
    els = (typeof window.jQuery === "function" ? window.jQuery(selectorString) : void 0) || document.querySelectorAll(selectorString);
    _results = [];
    for (_i = 0, _len = els.length; _i < _len; _i++) {
      el = els[_i];
      _results.push(el.setAttribute('data-ng-controller', controllerName));
    }
    return _results;
  },
  register: function(appInstance, name, deps, parent) {
    if (name.indexOf('$') === 0) {
      this.registerSelector(appInstance, name.slice(1), parent);
    } else {
      appInstance.controller(name, parent);
    }
    if (angular.isArray(deps)) {
      return this.inject(parent, deps);
    } else if (angular.isObject(deps)) {
      return this.inject(parent, [deps]);
    }
  },
  create: function(module, name, deps, proto, parent) {
    var c, key, value, _ref;
    c = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref = _Class.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      _Class.register(name, deps, module);

      return _Class;

    })(parent);
    for (key in proto) {
      if (!__hasProp.call(proto, key)) continue;
      value = proto[key];
      c.prototype[key] = value;
    }
    return c;
  }
};

origMethod = angular.module;

angular.module = function(name, reqs, configFn) {
  /*
  # We have to override the `angular.module` method to see if 'classy' has been specified
  # as a requirement. We also need the module name to we can register our classy controllers.
  # Unfortunately there doesn't seem to be a more pretty/pluggable way to this.
  */

  var classyController, module;
  module = origMethod(name, reqs, configFn);
  if (reqs && __indexOf.call(reqs, 'classy') >= 0) {
    classyController = (function() {
      classyController.prototype.__classyControllerScopeName = '$scope';

      classyController.register = function(name, deps) {
        return classFns.register(module, name, deps, this);
      };

      classyController.inject = function() {
        var deps;
        deps = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return classFns.inject(this, deps);
      };

      classyController.create = function(name, deps, proto) {
        return classFns.create(module, name, deps, proto, this);
      };

      function classyController() {
        classFns.construct(this, arguments);
      }

      return classyController;

    })();
    module.cC = module.classyController = classyController;
  }
  return module;
};

angular.module('classy', []);
